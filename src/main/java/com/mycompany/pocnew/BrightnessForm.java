package com.mycompany.pocnew;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import javax.swing.JFrame;
import javax.swing.JSlider;



public class BrightnessForm extends javax.swing.JFrame
{

    POC parent = null;

    // W konstruktorze dla ulatwienia podaje obiekt POC - zeby miec dostep do obrazow oryginalnego i roboczego
    // To jest rozwiazanie malo eleganckie i przy rozbudowie powinno zostac zastapione odpowiednimi interfejsami
    public BrightnessForm(POC parent)
    {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        this.parent = parent;
        initComponents();
    }

    // Metoda modyfikujaca wszystkie piksele obrazu src i zapisujaca je do obrazu dst
    void processImage(BufferedImage src, BufferedImage dst, int db)
    {
        // Pobranie referencji na bufor z pikselami obrazu zrodlowego i docelowego 
        // Dzieki temu uzyskuje sie bezposredni dostep do ich wartosci
        DataBufferInt sbuff = (DataBufferInt) src.getRaster().getDataBuffer();
        DataBufferInt dbuff = (DataBufferInt) dst.getRaster().getDataBuffer();
        int[] sp = sbuff.getData();
        int[] dp = dbuff.getData();
        
        
        // Iteracja po wszystkich pikselach obrazu i przeliczenie kazdego z nich za pomoca funkcji changeBrightness()
        int i = 0;
        for (int y = 0; y < src.getHeight(); ++y)
        {
            for (int x = 0; x < src.getWidth(); ++x)
            {
                dp[i] = ImageAlgorithms.changeBrightness(sp[i], db);
                
                // Ewentualnie inny zapis tylko na buforach:
                    //dbuff.setElem(i, ImageUtils.changeBrightness(sbuff.getElem(i), db));
             
                i++;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        vSpiner = new javax.swing.JSpinner();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Brightness");
        setMinimumSize(new java.awt.Dimension(300, 100));
        setPreferredSize(new java.awt.Dimension(380, 100));

        slider.setMaximum(255);
        slider.setMinimum(-255);
        slider.setValue(0);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        cancelButton.setText("Anuluj");
        cancelButton.setPreferredSize(new java.awt.Dimension(125, 25));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });

        okButton.setText("OK");
        okButton.setPreferredSize(new java.awt.Dimension(125, 25));
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(vSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Reakcja na zmiane polozenia suwaka
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderStateChanged
    {//GEN-HEADEREND:event_sliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        vSpiner.setValue(slider.getValue());
        try
        {
            // Dla kazdego nowego polozenia suwaka obraz roboczy jest przeliczany od nowa
            processImage(parent.originalImage, parent.workImage, slider.getValue());
            
            // Po przeliczeniu wartosci obrazu, wymuszenie odrysowania formatki glownej
            parent.repaint();
        } 
        catch (Exception e)
        {
            System.out.println("brightness error: " + e.getMessage());
        }
    }//GEN-LAST:event_sliderStateChanged

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_cancelButtonMouseClicked
    {//GEN-HEADEREND:event_cancelButtonMouseClicked
        parent.revertImage();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_okButtonMouseClicked
    {//GEN-HEADEREND:event_okButtonMouseClicked
        parent.updateImage();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okButtonMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JSlider slider;
    private javax.swing.JSpinner vSpiner;
    // End of variables declaration//GEN-END:variables
}
